package com.test.app.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.test.app.domain.dto.AppDto;
import com.test.app.domain.mapper.AppMapper;


@Controller
@RequestMapping("/app")
public class AppController {

    @Autowired
    private AppMapper appMapper;

    @PostMapping("/login")
    public ResponseEntity<?> loginUser(@RequestBody AppDto user, HttpSession session) {
        AppDto foundUser = appMapper.selectUserByUsername(user.getUsername());
        if (foundUser != null && foundUser.getPassword().equals(user.getPassword())) {
            session.setAttribute("user", foundUser);
            return ResponseEntity.ok("로그인에 성공하였습니다.");
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("잘못된 아이디 또는 비밀번호입니다.");
        }
    }

    @GetMapping("/logout")
    public ResponseEntity<?> logoutUser(HttpSession session) {
        session.removeAttribute("user");
        session.invalidate();
        return ResponseEntity.ok("로그아웃하였습니다.");
    }
    @GetMapping("/boards/page/{pageNum}")
    public ResponseEntity<List<AppDto>> getBoardsByPage(@PathVariable int pageNum, @RequestParam(name = "pageSize", defaultValue = "10") int pageSize) {
        int offset = (pageNum - 1) * pageSize;
        List<AppDto> boards = appMapper.selectAllBoards(offset, pageSize);
        return ResponseEntity.ok(boards);
    }

    @PutMapping("/boards/{id}/like")
    public ResponseEntity<?> likeBoard(@PathVariable Long id) {
        appMapper.likeBoard(id);
        return ResponseEntity.ok("게시글에 추천하였습니다.");
    }

    @PutMapping("/boards/{id}/dislike")
    public ResponseEntity<?> dislikeBoard(@PathVariable Long id) {
        appMapper.dislikeBoard(id);
        return ResponseEntity.ok("게시글에 반대하였습니다.");
    }

    @PostMapping("/boards/{boardId}/comments")
    public ResponseEntity<?> createComment(@PathVariable Long boardId, @RequestBody AppDto comment) {
        comment.setBoardId(boardId);
        appMapper.createComment(comment);
        return ResponseEntity.ok("댓글이 등록되었습니다.");
    }

    @PostMapping("/join") // 매핑을 추가했습니다.
    public ResponseEntity<?> joinUser(@RequestBody AppDto user) {
        try {
            appMapper.insertUser(user);
            return ResponseEntity.ok("User registered successfully.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("An error occurred during registration.");
        }
    }

    
}


